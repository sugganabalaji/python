==========================================================
                                        Dict  Category Data Type
                        ==========================================================
=>The data Type in  Dict  Category is 'dict'.
=>dict is one of the pre-defined class
=>The purpose of dict data type is that "To Store the Data in the form of (Key,Value) ".
=>In (Key,value), the Values of Key Represents unique and Values of Value Represents May or May not be Unique.
=>To store (Key,value) in dict, we use curly braces and (Key,value) separated by comma.
=>Syntax:    varname={Key1:Val1,Key2:Val2,........,Key-n:Val-n}
                here Key1,Key2...Key-n Represents of Values of Key
                        Val1,Val2,....Val-n Represents of Values of Values
=>An objct of dict maintains Insertion Order
=>An object of dict never Contains Indices. So that we can't perform Both Index and Slicing Operations.
=>An object of dict belongs to MUTABLE. In detail, the values of Key belongs to IMMUTABLE and Values of Value belongs to  MUTABLE.
=>In Python Programming, we can create Two Types of Dict Objects. They are
                        a) Empty Dict
                        b) Non-Empty Dict
-----------------------------
a) Empty Dict
-----------------------------
=>An Empty Dict is one, which does not contain any Elements and whose length is 0
=>Syntax:      dictobj={}
                                (OR)
                        dictobj=dict()
-----------------------------
b) Non-Empty Dict
-----------------------------
=>A Non-Empty Dict is one, which contains Elements and whose length is >0
=>Syntax:      dictobj={Key1:Val1,Key2:Val2,........,Key-n:Val-n}
**********************************************************************************************************
=>Syntax Adding (Key,value) to Empty  / Non-Empty Dict
**********************************************************************************************************
                dictobj[Key1]=Val1
                dictobj[Key2]=Val2
                --------------------------
                --------------------------
                dictobj[Key-n]=Val-n
=>here Key1,Key2...Key-n Represents of Values of Key
           Val1,Val2,....Val-n Represents of Values of Value
**********************************************************************************************************
==============================================================================================
Examples
==============================================================================================
>>> d1={10:"Apple",20:"Mango",30:"Kiwi",40:"Sberry"}
>>> print(d1,type(d1))------------{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Sberry'} <class 'dict'>
>>> len(d1)----------4
>>> d2={"Python":1,"C":2,"Java":3,"C++":4}
>>> print(d2,type(d2))----------{'Python': 1, 'C': 2, 'Java': 3, 'C++': 4} <class 'dict'>
>>> len(d2)-------------------------4
>>> d3={100:1.2,200:1.3,300:1.2,400:1.3}
>>> print(d3,type(d3))---------{100: 1.2, 200: 1.3, 300: 1.2, 400: 1.3} <class 'dict'>
-------------------------------------------------
>>> d1={10:1.2,10:2.3,10:4.5,10:0.2}
>>> print(d1)------------{10: 0.2}
>>> d1={10: 1.2, 20: 2.3, 10: 1.9, 80 : 2.9}
>>> print(d1)--------{10: 1.9, 20: 2.3, 80: 2.9}
--------------------------------------------------
>>> d1={10:"Apple",20:"Mango",30:"Kiwi",40:"Sberry"}
>>> print(d1,type(d1))-----------{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Sberry'} <class 'dict'>
>>> d1[0]---------KeyError: 0
>>> d1[10]--------'Apple'
>>> d1[20]--------'Mango'
>>> d1[30]--------'Kiwi'
>>> d1[40]---------'Sberry'
>>> d1[50]--------KeyError: 50
-----------------------------------------------
>>> d1={10:"Apple",20:"Mango",30:"Kiwi",40:"Sberry"}
>>> print(d1,type(d1),id(d1))-----{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Sberry'} <class 'dict'> 1978790674944
>>> d1[10]="Guava"
>>> print(d1,type(d1),id(d1))------{10: 'Guava', 20: 'Mango', 30: 'Kiwi', 40: 'Sberry'} <class 'dict'> 1978790674944
----------------------------------------------------------
>>> d1={}
>>> print(d1,type(d1))-----------{} <class 'dict'>
>>> len(d1)------------------------0
        OR
>>> d2=dict()
>>> print(d2,type(d2))---------{} <class 'dict'>
>>> len(d2)-----------------------0
----------------------------------------------------------
>>> d1={}
>>> print(d1,type(d1),id(d1))-------------{} <class 'dict'> 1978790785984
>>> len(d1)--------------------0
>>> d1[100]=1.2    # Inserted Entry
>>> d1[200]=2.2    # Inserted Entry
>>> d1[300]=1.2     # Inserted Entry
>>> d1[400]=4.2     # Inserted Entry
>>> print(d1,type(d1),id(d1))----{100: 1.2, 200: 2.2, 300: 1.2, 400: 4.2} <class 'dict'> 1978790785984
>>> len(d1)-------------------4
>>> d1[500]=5.5 # Inserted Entry
>>> print(d1,type(d1),id(d1))-----{100: 1.2, 200: 2.2, 300: 1.2, 400: 4.2, 500: 5.5} <class 'dict'> 1978790785984
>>> d1[300]=0.2 # Modified Entry bcoz the key 300 already exist in d1 
>>> print(d1,type(d1),id(d1))---{100: 1.2, 200: 2.2, 300: 0.2, 400: 4.2, 500: 5.5} <class 'dict'> 1978790785984
===========================================================================================