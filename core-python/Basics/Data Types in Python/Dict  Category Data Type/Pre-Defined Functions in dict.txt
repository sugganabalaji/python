================================================
                                Pre-Defined Functions in dict
                        ================================================
=>We know that on the object of Dict, we can perform the following Operations.
                        1. We get the value of Value by passing Value of Key
                        2. We can Modify the Old value of Value by passing Exist Value of Key
                        3. We can add (Key,Value) to Dict Object.
=>To Perform Additional Operations along with the above Operations, we use the Pre-Defined Functions Present in Dict    Object.
**************************************************************************************************************************************************
1) clear()
**************************************************************************************************************************************************
=>Syntax:   dictobj.clear()
=>This Function is used for Removing all the (Key,Value) from dict object
=>When we call this Function w.r.t empty dict then we get None as Result
------------------
Examples
------------------
>>> d1={10:1.2,20:3.4,30:1.2,40:4.5,50:3.4}
>>> print(d1,type(d1),id(d1))-------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5, 50: 3.4} <class 'dict'> 3078526298944
>>> len(d1)---------------------------5
>>> d1.clear()
>>> print(d1,type(d1),id(d1))--------{} <class 'dict'> 3078526298944
>>> len(d1)----------------------0
>>> print(d1.clear())----------None
>>> print({}.clear())-----------None
>>> print(dict().clear())------None
**************************************************************************************************************************************************
2) pop()
**************************************************************************************************************************************************
Syntax:    dictobj.pop(Key)
=>This Function is used for Removing (Key,Value) from Non-empty Dict Object
=>If the Value of Key does not Exist then we get KeyError
--------------------
Examples
--------------------
>>> d1={10:1.2,20:3.4,30:1.2,40:4.5,50:3.4}
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5, 50: 3.4} <class 'dict'> 3078526259136
>>> d1.pop(30)--------------1.2
>>> print(d1,type(d1),id(d1))--------{10: 1.2, 20: 3.4, 40: 4.5, 50: 3.4} <class 'dict'> 3078526259136
>>> d1.pop(20)------------3.4
>>> print(d1,type(d1),id(d1))-----{10: 1.2, 40: 4.5, 50: 3.4} <class 'dict'> 3078526259136
>>> d1.pop(50)------------3.4
>>> print(d1,type(d1),id(d1))-------{10: 1.2, 40: 4.5} <class 'dict'> 3078526259136
>>> d1.pop(120)-----------------------KeyError: 120
>>> {}.pop(10)------------------------KeyError: 10
>>> dict().pop(20)-------------------KeyError: 20
**************************************************************************************************************************************************
3) popitem()
**************************************************************************************************************************************************
Syntax:  dictobj.popitem()
=>This Function is used for Removing Last (Key,value) from Non-empty dict object
=>When we call this function on empty dict object then we get KeyError.
-----------------
Examples
-----------------
>>> d1={10:1.2,20:3.4,30:1.2,40:4.5,50:3.4}
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5, 50: 3.4} <class 'dict'> 3078526259392
>>> d1.popitem()-----------------(50, 3.4)
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5} <class 'dict'> 3078526259392
>>> d1.popitem()--------------(40, 4.5)
>>> print(d1,type(d1),id(d1))---{10: 1.2, 20: 3.4, 30: 1.2} <class 'dict'> 3078526259392
>>> d1.popitem()---------(30, 1.2)
>>> print(d1,type(d1),id(d1))---------{10: 1.2, 20: 3.4} <class 'dict'> 3078526259392
>>> d1.popitem()-------------(20, 3.4)
>>> print(d1,type(d1),id(d1))------{10: 1.2} <class 'dict'> 3078526259392
>>> d1.popitem()---------------(10, 1.2)
>>> print(d1,type(d1),id(d1))------------{} <class 'dict'> 3078526259392
>>> d1.popitem()--------------KeyError: 'popitem(): dictionary is empty'
>>> {}.popitem()-----------------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()------------KeyError: 'popitem(): dictionary is empty'
**************************************************************************************************************************************************
4) copy()
**************************************************************************************************************************************************
Syntax:   dictobj2=dictobj1.copy()
=>This Function is used for Copying the content of One Dict object to another dict object(Implementation of Shallow Copy)
---------------------
Examples
---------------------
>>> d1={10:1.2,20:3.4,30:1.2}
>>> print(d1,type(d1),id(d1))---------------{10: 1.2, 20: 3.4, 30: 1.2} <class 'dict'> 3078527577088
>>> d2=d1.copy() # Shallow Copy
>>> print(d2,type(d2),id(d2))--------------{10: 1.2, 20: 3.4, 30: 1.2} <class 'dict'> 3078526259392
>>> d1[40]=4.5
>>> d2[25]=1.2
>>> print(d1,type(d1),id(d1))-----{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5} <class 'dict'> 3078527577088
>>> print(d2,type(d2),id(d2))-----{10: 1.2, 20: 3.4, 30: 1.2, 25: 1.2} <class 'dict'> 3078526259392
**************************************************************************************************************************************************
5) get()--Most Imp
**************************************************************************************************************************************************
=>Syntax:    Varname=dictobj.get(Key)
=>This Function is used for Obtaining Value of Value by passing the value of Key
=>If the Value of Key does not exist then we get None as Result
                                OR
=>Syntax:     dictobj[Key]
=>This Syntax also gives Value of Value by passing Value of Key
=>If the Value of Key does not exist then we get KeyError
----------------------------
Examples
----------------------------
>>> d1={10:1.2,20:3.4,30:1.2,40:4.5,50:3.4}
>>> print(d1,type(d1))-----------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5, 50: 3.4} <class 'dict'>
>>> val=d1.get(10)
>>> print(val)--------1.2
>>> val=d1.get(20)
>>> print(val)--------3.4
>>> val=d1.get(100)
>>> print(val)---------None
>>> #-----------------OR----------------
>>> d1={10:1.2,20:3.4,30:1.2,40:4.5,50:3.4}
>>> print(d1,type(d1))-----------{10: 1.2, 20: 3.4, 30: 1.2, 40: 4.5, 50: 3.4} <class 'dict'>
>>> d1[10]------------------1.2
>>> d1[20]------------------3.4
>>> d1[100]----------------KeyError: 100
**************************************************************************************************************************************************
6) keys()
**************************************************************************************************************************************************
Syntax:      varname=dictobj.keys()
=>This Function is used for Obtainng Values of Key and placed in varname and whose type <class,'dict_keys'>
-------------------
Examples
-------------------
>>> d1={10:"Python",20:"Django",30:"C++",40:"C"}
>>> print(d1,type(d1))-----------{10: 'Python', 20: 'Django', 30: 'C++', 40: 'C'} <class 'dict'>
>>> ks=d1.keys()
>>> print(ks,type(ks))-----------dict_keys([10, 20, 30, 40]) <class 'dict_keys'>
>>> for k in ks:
...                print(k)
...
                10
                20
                30
                40
>>> for k in d1.keys():
...                print(k)
...
                10
                20
                30
                40
**************************************************************************************************************************************************
7) values()
**************************************************************************************************************************************************
Syntax:      varname=dictobj.values()
=>This Function is used for Obtainng Values of Value and placed in varname and whose type <class,'dict_values'>
----------------
Examples
----------------
>>> d1={10:"Python",20:"Django",30:"C++",40:"C"}
>>> print(d1,type(d1))----------{10: 'Python', 20: 'Django', 30: 'C++', 40: 'C'} <class 'dict'>
>>> vs=d1.values()
>>> print(vs,type(vs))---------dict_values(['Python', 'Django', 'C++', 'C']) <class 'dict_values'>
>>> for v in vs:
...                print(v)
...
                Python
                Django
                C++
                C
>>> for v in d1.values():
...                print(v)
...
                Python
                Django
                C++
                C
**************************************************************************************************************************************************
8) items()
**************************************************************************************************************************************************
Syntax:      varname=dictobj.items()
=>This Function is used for Obtainng (Key,value) from dict object and placed in varname and whose type <class,'dict_items'>
-------------------------
Examples
-------------------------
>>> d1={10:"Python",20:"Django",30:"C++",40:"C"}
>>> print(d1,type(d1))--------{10: 'Python', 20: 'Django', 30: 'C++', 40: 'C'} <class 'dict'>
>>> dit=d1.items()
>>> print(dit,type(dit))---dict_items([(10, 'Python'), (20, 'Django'), (30, 'C++'), (40, 'C')]) <class 'dict_items'>
>>> for its in dit:
...                print(its,type(its))
...
                (10, 'Python') <class 'tuple'>
                (20, 'Django') <class 'tuple'>
                (30, 'C++') <class 'tuple'>
                (40, 'C') <class 'tuple'>
>>> for kv in d1.items():
...                print(kv,type(kv))
...
                (10, 'Python') <class 'tuple'>
                (20, 'Django') <class 'tuple'>
                (30, 'C++') <class 'tuple'>
                (40, 'C') <class 'tuple'>
>>>
>>> for k,v in d1.items():
...                print(k,"--->",v)
...
                10 ---> Python
                20 ---> Django
                30 ---> C++
                40 ---> C
**************************************************************************************************************************************************
9) update()
**************************************************************************************************************************************************
Syntax:      dictobj1.update(dictobj2)
=>This Function is used for Merging the Content of DictObj2 with DictObj1.
-----------------
Examples
------------------
>>> d1={10:1.2,20:1.3}
>>> d2={30:2.3,40:4.5}
>>> d1.update(d2)
>>> print(d1)----------------------------{10: 1.2, 20: 1.3, 30: 2.3, 40: 4.5}
----------------------------------
>>> d1={10:1.2,20:1.3}
>>> d2={10:12.3,40:4.5}
>>> d1.update(d2)
>>> print(d1)----------------------------{10: 12.3, 20: 1.3, 40: 4.5}
------------------------------------
>>> d1={10:1.2,20:1.3}
>>> d2={10:12.3,20:14.5}
>>> d1.update(d2)
>>> print(d1)----------------------------{10: 12.3, 20: 14.5}
============================================x===============================================