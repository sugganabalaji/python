=========================================================
                                        Operations on str Data (Part-1)   
                        =========================================================
=>on str Data, we can Perform Two Types of Operations. They are


                                1. Indexing Operation
                                2. Slicing Operation
-------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Indexing Operation
-------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Purpose of Indexing Operation is that "To Get the Single Value from str object" by passing Valid Index.
=>Syntax:                strobj[ Index ]
=>Here strobj is an object of <class,str>
=>Here [] Represents Square Brackets Used in Indexing Operation along with strobj.
=>Here Index represents Numerical Integer value and It can be either +ve or -ve.
=>If we Enter Valid Index then we get the Corresponsing Indexed value from Str Object.
=>if we enter Invalid Index then we get IndexError.
---------------------------------------
Examples
---------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))------------------PYTHON <class 'str'>
>>> s[0]-------------------------------'P'
>>> print(s[0])----------------------P
>>> s[2]------------------------------'T'
>>> s[4]-------------------------------'O'
>>> s[3]-------------------------------'H'
>>> s[5]-------------------------------'N'
>>> s[-1]------------------------------'N'
>>> s[-6]------------------------------'P'
>>> s[-3]------------------------------'H'
>>> s[-4]-------------------------------'T'
>>> s[-5]-------------------------------'Y'
>>> s[11]------------------------------IndexError: string index out of range
>>> s[-12]-----------------------------IndexError: string index out of range
----------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------PYTHON <class 'str'>
>>> s[True]-------------------------'Y'
>>> s[False]------------------------'P'
>>> s[-True]------------------------'N'
>>> s[-False]----------------------'P'
>>> s[0xF-16]---------------------'N'
>>> s[-0x5]--------------------------'Y'
>>> s[01]---------------------------SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
>>> s[0b0000]--------------------'P'
-------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Slicing Operation
-------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The purpose of Slicing Operation is that "To Select or Get OR Obtain range of Values or Sub String from given Main Str Object ".
=>We can perform Slicing Operation with 5 Syntaxes. 
********************************************
Syntax-1:   strobj[BEGIN:END]
********************************************
=>This Syntax Generates of Range of Values from BEGIN Index to END-1 Index in FORWARD DIRECTION Provided BEGIN-INDEX<END-INDEX Otherwise we get Space OR ' ' as Result.
---------------------------------
Examples: +BEGIN : +END  (The Cond BEGIN<END is  Considered)
--------------------------------
>>> s="PYTHON"
>>> s[0:4]---------------------------------'PYTH'
>>> s[2:5]---------------------------------'THO'
>>> s[1:5]---------------------------------'YTHO'
>>> s[2:4]---------------------------------'TH'
>>> s[0:3]---------------------------------'PYT'
>>> s[3:5]---------------------------------'HO'
>>> s[2:3]---------------------------------'T'
>>> s[0:6]---------------------------------'PYTHON'
>>> s[4:3]---------------------------------''
>>> print(s[4:3])-------------------------Space
-------------------------------------------
Examples: -BEGIN : -END  (The Cond BEGIN<END is  Considered)
-------------------------------------------
>>> s="PYTHON"
>>> s[-6:-2]-----------------------'PYTH'
>>> s[-2:-6]-----------------------' '
>>> s[-3:-1]-----------------------'HO'
>>> s[-6:-4]-----------------------'PY'
>>> s[-5:-1]-----------------------'YTHO'
>>> s[-1:-5]----------------------''
>>> s[-5:-2]------------------------'YTH'
>>> s[-5:-3]------------------------'YT'
-------------------------------------------
Examples: +BEGIN : -END      (The Cond BEGIN<END is Not Considered)
-------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))--------------------PYTHON <class 'str'>
>>> s[2:-1]--------------------------------'THO'
>>> s[2:-2]--------------------------------'TH'
>>> s[0:-1]--------------------------------'PYTHO'
>>> s[1:-1]--------------------------------'YTHO'
>>> s[2:-3]--------------------------------'T'
>>> s[3:-5]--------------------------------''
>>> s[5:-6]--------------------------------''
-------------------------------------------
Examples: -BEGIN : +END   (The Cond BEGIN<END is Not Considered)
-------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------------PYTHON <class 'str'>
>>> s[-6:5]---------------------------------'PYTHO'
>>> s[-3:6]----------------------------------'HON'
>>> s[-4:5]----------------------------------'THO'
>>> s[-5:5]----------------------------------'YTHO'
>>> s[-6:6]----------------------------------'PYTHON'
>>> s[-4:3]----------------------------------'T'
>>> s[-3:3]----------------------------------''
------------------------------------------------------
Most Special Points
------------------------------------------------------
>>> s="PYTHON"
>>> s[0:1000]------------------------'PYTHON'
>>> s[3:100]-------------------------'HON'
>>> s[2:200]-------------------------'THON'
>>> s[200:2]-------------------------''
>>> s[-6:600]------------------------'PYTHON'
>>> s[-5:500]-----------------------'YTHON'
>>> s[-1:1000]----------------------'N'
--------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[-1000:-5]----------------------'P'
>>> s[-900:-4]------------------------'PY'
>>> s[-800:-1]------------------------'PYTHO'
>>> s[-800:-6]------------------------''
>>> s[-100:0]-------------------------''
>>> s[0:-6]-----------------------------''
>>> s[-1000:1000]--------------------'PYTHON'
>>> s[-0b1111:0xF]------------------'PYTHON'
------------------------------------------------------
********************************************
Syntax-2:  strobj[BEGIN : ]
********************************************
=>In this Syntax, We are Specifying BEGIN Index and Not Specifying END Index.
=>If we Don't Specify END Index then PVM Takes the END Index as either len(strobj)  in the case +Ve Index OR -1 In the case -Ve Index
                        OR
=>If we Don't Specify END Index then PVM Takes the Range of Values from BEGIN Indexed Value to Last Character.
-----------------------------
Examples
----------------------------
>>> s="PYTHON"
>>> s[0:]--------------------------------'PYTHON'
>>> s[3:]--------------------------------'HON'
>>> s[2:]--------------------------------'THON'
>>> s[1:]-------------------------------'YTHON'
>>> s[4:]-------------------------------'ON'
---------------------------------
Examples
---------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[-6:]---------------------------'PYTHON'
>>> s[-4:]---------------------------'THON'
>>> s[-5:]---------------------------'YTHON'
>>> s[-3:]----------------------------'HON'
>>> s[-2:]----------------------------'ON'
>>> s[-1:]----------------------------'N'
>>> s[-1000:]-----------------------'PYTHON'
********************************************
Syntax-3:   strobj[ : END]
********************************************
=>Here We are Not Specifying BEGIN Index and We are Specifying END Index.
=>If we Don't Specify BEGIN Index then PVM Takes the BEGIN Index as 0 in the +Ve Indexing OR  -len(strobj) in the case of -VE Indexing
                                OR
=>If we Don't Specify BEGIN Index then PVM Takes from First Character to END-1 Indexed Value.
--------------------------------------
Examples
--------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[:6]-------------------------------'PYTHON'
>>> s[:4]-------------------------------'PYTH'
>>> s[:3]-------------------------------'PYT'
>>> s[:5]-------------------------------'PYTHO'
>>> s[:2]-------------------------------'PY'
>>> s[:1]-------------------------------'P'
------------------------------------------------
Examples
-------------------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------------PYTHON
>>> s[:-4]------------------------------------'PY'
>>> s[:-1]------------------------------------'PYTHO'
>>> s[:-3]------------------------------------'PYT'
>>> s[:-5]------------------------------------'P'
>>> s[:-2]------------------------------------'PYTH'
>>> s[:-100]---------------------------------''
>>> s[-1000:]-------------------------------'PYTHON'
>>> s[:1000]--------------------------------'PYTHON'
********************************************
Syntax-4:  strobj[ : ]
********************************************
=>In This Syntax, we are not Specifying BEGIN and END Indices.
=>If we Don't Specify BEGIN  and END Indices then PVM Takes from First Character to Last Character.
------------------------
Examples
------------------------
>>> s="PYTHON"
>>> print(s)------------------------PYTHON
>>> s[:]-----------------------------'PYTHON'
>>> s="PYTHON PROG LANG"
>>> s[:]-----------------------------'PYTHON PROG LANG'
>>> "HYDERABAD"[0]------------'H'
>>> "HYDERABAD"[-1]-----------'D'
>>> "HYDERABAD"[True]--------'Y'
>>> "HYDERABAD"[False:True]-------'H'
>>> "HYDERABAD"[0]---------------------'H'
>>> "HYDERABAD"[-1]---------------------'D'
>>> "HYDERABAD"[True]------------------'Y'
>>> "HYDERABAD"[False:True]----------'H'
>>> "HYDERABAD"[:3]---------------------'HYD'
>>> "HYDERABAD"[:len("KVR")]----------'HYD'
NOTE: ALL THE ABOVE SYNTAXES ARE GIVING RANGE OF VALS IN FORWARD DIRECTION WITH DEFAULT STEP +1
**************************************************************************************************
Syntax-5:  strobj[ BEGIN : END : STEP ]
***************************************************************************************************
Rule-1: Here BEGIN ,END and STEP Values Can be Either +VE OR -VE OR BOTH


-----------
Rule-2:   If the value of STEP is +VE  then PVM Takes Range of Characters from BEGIN Index to END-1 Index in 
------------FORWARD DIRECTION Provided BEGIN < END Index Otherwise we get ' ' or Space as Result.


-----------
Rule-3:   If the Value of STEP is -VE then PVM Takes Range of Characters from BEGIN to END+1 Index in BACKWARD -------------DIRECTION Provided BEGIN > END Index Otherwise we get ' ' or Space as Result.


Rule-4:    In FORWARD DIRECTION, If we specify END Index as 0 then we get ' ' OR space as Result
-------------


Rule-5 :  In BACKWARD DIRECTION, If we specify END Index as -1 then we get ' ' OR space as Result
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples on RULE-2
-------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[0:5:2]-------------------------'PTO'
>>> s[0:6:3]-------------------------'PH'
>>> s[1:5:2]-------------------------'YH'
>>> s[4:1:2]--------------------------''
>>> s[2:6:3]--------------------------'TN'
-----------------------------
>>> s="PYTHON"----------------
>>> s[-6:-1:2]--------------------'PTO'
>>> s[-5:-2:2]--------------------'YH'
>>> s[-6:-2:3]---------------------'PH'
>>> s[-6:-3:3]---------------------'P'
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples on RULE-3
-------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[::]---------------------'PYTHON'
>>> s[::1]-------------------'PYTHON'
>>> s[::-1]------------------'NOHTYP'
>>> s[5:0:-1]---------------'NOHTY'
>>> s[5:0:-2]---------------'NHY'
>>> s[4:0:-3]---------------'OY'
>>> s[5:2:-3]---------------'N'
>>> s[5:0:-4]---------------'NY'
----------------------------------------------------
Examples on RULE2 and RULE-3
---------------------------------------------------
>>> s="PYTHON"
>>> s[::]
'PYTHON'
>>> s[::1]
'PYTHON'
>>> s[::-1]
'NOHTYP'
>>> s[5:0:-1]
'NOHTY'
>>> s[5:0:-2]
'NHY'
>>> s[4:0:-3]
'OY'
>>> s[5:2:-3]
'N'
>>> s[5:0:-4]
'NY'
>>> s[5:-100:-1]
'NOHTYP'
>>> s[:5:-1]
''
>>> s[:3]
'PYT'
>>> s[:3:-1]
'NO'
>>> s[:0:-2]
'NHY'
>>> s[:4:-2]
'N'
>>>
>>> s[4::]
'ON'
>>> s[4::-1]
'OHTYP'
>>> s[7::-2]
'NHY'
>>> "OYO"[::-1]
'OYO'
>>> "OYO"[1:][::-1]
'OY'
>>>
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples on RULE-4
-------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[:0]
''
>>> s[:0:2]
''
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples on RULE-5
-------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[:-1:-1]
''
>>> s[:-1:-3]
''
>>> s[:-1:-4]
''
=================================================x============================================
>>> "LIRIL"[::-1]
'LIRIL'
>>> "WOW"[::-1]
'WOW'
>>> "RADAR"[::-1]
'RADAR'
>>> "RACECAR"=="RACECAR"[::-1]
True
>>> "OYO"[::]=="OYO"[::-1]
True
>>> "MALAYALAM"[:]=="MALAYALAM"[::-1]
True
>>> "MADAM"=="MADAM"[::-1]
True
>>> "1221"=="1221"[::-1]
True
>>> "12344321"=="1234321"[::-1]
False
>>> "WINDOW"[::-1]=="WOMDOW"[::]
False
===================================================================================










-------------------------------------------------------------------------------------------------------------------------------------------------------------