===============================================================
                                                        Pre-Defined Functions set
                        ===============================================================
=>On the Object of set, we can Perform Various Operations by using Pre-Defined Functions Present in set object.
------------------------------------------------------------------------------------------------------------------------------------------------------------
1.  add()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj.add(value)
=>This Function is used for adding an Element to set object
------------------------
Examples
------------------------
>>> s1={10,"RS",34.56}
>>> print(s1,type(s1),id(s1))------------{'RS', 10, 34.56} <class 'set'> 1819496964704
>>> s1.add("Python")
>>> print(s1,type(s1),id(s1))-----------{'Python', 'RS', 10, 34.56} <class 'set'> 1819496964704
>>> s1.add(333)
>>> print(s1,type(s1),id(s1))-------------{34.56, 'RS', 10, 333, 'Python'} <class 'set'> 1819496964704
------------------------------------------
>>> s2=set()
>>> s2.add(100)
>>> s2.add(23.45)
>>> s2.add("HYD")
>>> print(s2,type(s2),id(s2))------------------{'HYD', 100, 23.45} <class 'set'> 1819500156896
------------------------------------------------------------------------------------------------------------------------------------------------------------
2.  clear()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj.clear()
=>This Function is used for Removing all the Values from set object
=>When this function on empty set object then we get None as Result.
----------------------
Examples
----------------------
>>> s1={10,"RS",34.56}
>>> print(s1,type(s1),id(s1))-------------{'RS', 10, 34.56} <class 'set'> 1819500153760
>>> len(s1)------------------------------------3
>>> s1.clear()
>>> print(s1,type(s1),id(s1))--------------set() <class 'set'> 1819500153760
>>> print(s1.clear())------------------------None
>>> print(set().clear())--------------------None
------------------------------------------------------------------------------------------------------------------------------------------------------------
3.  remove()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     setobj.remove(Value)
=>This Function is used for Removing the Specified Value from set object.
=>If the Specified Value does not exist then we get KeyError.
-----------------------
Examples
-----------------------
>>> s1={10,20,30,40,50,10,20}
>>> print(s1,id(s1))----------------------{50, 20, 40, 10, 30} 1819496963584
>>> s1.remove(20)
>>> print(s1,id(s1))----------------------{50, 40, 10, 30} 1819496963584
>>> s1.remove(50)
>>> print(s1,id(s1))----------------------{40, 10, 30} 1819496963584
>>> s1.remove(500)----------------------KeyError: 500
>>> set().remove(123)-------------------KeyError: 123
------------------------------------------------------------------------------------------------------------------------------------------------------------
4.  discard()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     setobj.discard(Value)
=>This Function is used for Removing the Specified Value from set object.
=>If the Specified Value does not exist then we get Space OR None as Result (No KeyError)
--------------------------
Examples
--------------------------
>>> s1={10,20,30,40,50,10,20}
>>> print(s1,id(s1))--------------------------{50, 20, 40, 10, 30} 1819496964704
>>> s1.discard(30)
>>> print(s1,id(s1))--------------------------{50, 20, 40, 10} 1819496964704
>>> s1.discard(20)
>>> print(s1,id(s1))-------------------------{50, 40, 10} 1819496964704
>>> s1.discard(200)------------------------- Space as Result
>>> s1.remove(200)------------------------KeyError: 200
>>> x=s1.discard(200)
>>> print(x)----------------------------------- None (Indicates that Element does not Exist in set)
------------------------------------------------------------------------------------------------------------------------------------------------------------
5.  pop()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj.pop()
=>This is used removing Arbirary Element from set object
=>If the Order of Elements of set object is not given then pop() removes Any Arbitray Element.
=>If the Order of Elements of set Object is given then pop() removes First Element.
=>If we call pop() on empty set object then we get KeyError
---------------------
Examples
---------------------
>>> s1={10,20,30,40,50,60,70,80}  # Order of Display is not Given
>>> s1.pop()----------------70
>>> s1.pop()-----------------40
>>> s1.pop()-----------------10
>>> s1.pop()----------------80
>>> s1.pop()---------------50
>>> s1={"RS","DR","TR","SS","ZS","HT"} # Order of Display is not Given
>>> s1.pop()------------'DR'
>>> s1.pop()-----------'HT'
---------------------------------------------
>>> s2={10,"HYD",23.45,2+3j,56.78,True,False}  # Order of Display Given
>>> print(s2)-----------------{False, True, 'HYD', 23.45, 56.78, 10, (2+3j)}
>>> s2.pop()-----------------False
>>> s2.pop()-----------------True
>>> s2.pop()----------------'HYD'
>>> s2.pop()------------------23.45
>>> s2.pop()------------------56.78
>>> s2.pop()------------------10
>>> s2.pop()------------------(2+3j)
>>> s2.pop()------------------KeyError: 'pop from an empty set'
--------------------------------------
>>> s3={1.2,3.4,5.6,6.7,7.8,9.8}
>>> s3.pop()
1.2
>>> s3.pop()
3.4
>>> s3.pop()
5.6
>>> s3.pop()
6.7
>>> s3.pop()
7.8
>>> s3.pop()
9.8
------------------------------------------------------------------------------------------------------------------------------------------------------------
6. copy()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj2=setobj1.copy()
=>This Function is used for Copying the Content of one set object to another set object(Shallow Copy)
----------------------------
Examples
----------------------------
>>> s1={10,"RS",34.56}
>>> print(s1,id(s1))----------------------{'RS', 10, 34.56} 1819500154656
>>> s2=s1.copy() # Shallow Copy
>>> print(s2,id(s2))---------------{'RS', 10, 34.56} 1819496964704
>>> s1.add(100)
>>> s2.add("Python")
>>> print(s1,id(s1))--------------{100, 'RS', 10, 34.56} 1819500154656
>>> print(s2,id(s2))-------------{'Python', 'RS', 10, 34.56} 1819496964704
------------------------------------------------------------------------------------------------------------------------------------------------------------
7. isdisjoint()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   setobj1.isdisjoint(setobj2)
=>This fucntion returns True provided There is no Common Elements between SetObj1 and SetObj2
=>This fucntion returns False provided There is Atleast  One Common Element(s) between SetObj1 and SetObj2
----------------------------
Examples
----------------------------
>>> s1={10,20,30}
>>> s2={30,40,50,60}
>>> s3={15,25,35}
>>> s1.isdisjoint(s2)-----------------False
>>> s1.isdisjoint(s3)-----------------True
>>> s2.isdisjoint(s3)-----------------True
---------------------------------
>>> set().isdisjoint(set())-----------------True
>>> set().isdisjoint({10,20,30})----------True
------------------------------------------------------------------------------------------------------------------------------------------------------------
8. issuperset()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    setobj1.issuperset(setobj2)
=>This Function returns True Provided SetObj1 contains all the Elements of SetObj2 Otherwise It returns False
                                                        OR
=>This Function returns True Provided All the Elements of SetObj2  Present in  SetObj1 Otherwise It returns False
-----------------
Examples
-----------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,15,25,35}
>>>
>>> s1.issuperset(s2)---------------True
>>> s1.issuperset(s3)---------------False
>>> s2.issuperset(s1)---------------False
>>> s2.issuperset(s3)---------------False
>>> set().issuperset(set())---------True
------------------------------------------------------------------------------------------------------------------------------------------------------------
9. issubset()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    setobj1.issubset(setobj2)
=>This Fucntion Returns True Provided all the Elements of setobj1 are Present in setobj2 Otherwise returns False.
----------------------
Examples
----------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,15,25,35}
>>>
>>> s2.issubset(s1)-----------True
>>> s2.issubset(s3)----------False
>>> s1.issubset(s2)-----------False
>>> set().issubset(set())----------True
NOTE:
----------
>>> {10,20,30}.issuperset(set())
True
>>> set().issubset({10,20,30})
True
>>> set("RADAR").isdisjoint(set("ROCKET"))
False
>>> set("RADAR").issubset(set("ROCKET"))
False
>>>
------------------------------------------------------------------------------------------------------------------------------------------------------------
10. union()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.union(setobj2)
=>This function is used for Taking all Unique Elements of setobj1 and setobj2 and Place the Resultant Elements in 
     SetObj3.
----------------------------
Examples
----------------------------
>>> s1={10,20,30}
>>> s2={30,40,50}
>>> s3=s1.union(s2)
>>> print(s3,type(s3))------------------------{50, 20, 40, 10, 30} <class 'set'>
----------------------
>>> s1={10,20,30}
>>> s2={30,40,50}
>>> s3=s2.union(s1)
>>> print(s3,type(s3))------------------------{50, 20, 40, 10, 30} <class 'set'>
>>> {10,20,30}.union({"Python","C"})----{'Python', 20, 'C', 10, 30}
-----------------------------
>>> s1={10,20,30}
>>> s2={30,40,50}
>>> s3={15,25}
>>> s4=s1.union(s2,s3)
>>> print(s4,type(s4))--------------{50, 20, 40, 25, 10, 30, 15} <class 'set'>
>>>
------------------------------------------------------------------------------------------------------------------------------------------------------------
11. intersection()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  setobj3=setobj1.intersection(setobj2)
=>This Function is used for Obtaining Common Element(s) from Both SetObj1 and SetObj2 and Place Resultant Common Elements in SetObj3.
--------------------------
Examples
--------------------------
>>> s1={10,20,30}
>>> s2={30,40,50}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))------------{30} <class 'set'>
>>> {10,20,30}.intersection({"Python","C"})---------set()
-----------------------
>>> s1={10,20,30}
>>> s2={30,40,50}
>>> s3={15,25}
>>> s4=s1.intersection(s2,s3)
>>> print(s4,type(s4))-------------set() <class 'set'>
------------------------------------------------------------------------------------------------------------------------------------------------------------
12. difference()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj3=setobj1.difference(setobj2)
=>This function is used for Removing the Common Elements from Both Setobj1 and SetObj2 and Takes Remaining Elements from SetObj1 and Place them in setobj3.
-----------------------------------
Examples
-----------------------------------
>>> s1={10,20,30,40}
>>> s2={30,40,50,60}
>>> s3=s1.difference(s2)
>>> print(s3,type(s3))------------------{10, 20} <class 'set'>
>>> s4=s2.difference(s1)
>>> print(s4,type(s4))-----------------{50, 60} <class 'set'>
>>> {10,20}.difference({10,20}).difference({"A","E"})-----------set()
>>> {"A","E"}.difference({10,20}).difference({10,20})----------{'E', 'A'}
------------------------------------------------------------------------------------------------------------------------------------------------------------
13. symmetric_difference()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: setobj3=setobj1.symmetric_difference(setobj2)
                                OR
=>Syntax By Formula1: setobj3=setobj1.union(setobj2).difference(setob1.intersection(setobj2))
=>Syntax By Formula2: setobj3=(setobj1.difference(setobj2)).union(setob2.difference(setobj1))


=>This Function Removes the Common Elements from Both SetObj1 and SetObj2 and Take the Remaining Elements 
    from Both SetObj1 and Setobj2 and Place them in SetObj3.
----------------------
Examples
----------------------
>>> s1={10,20,30}
>>> s2={20,30,40,50}
>>> s3=s1.symmetric_difference(s2)
>>> print(s3,type(s3))-------------------{40, 10, 50} <class 'set'>
>>> s4=s2.symmetric_difference(s1)
>>> print(s4,type(s4))------------------{40, 10, 50} <class 'set'>
>>> {10,20,30}.symmetric_difference({1,2,3})----------{1, 2, 3, 10, 20, 30}
>>> {10,20,30}.symmetric_difference({10,20,30})--------set()
>>> s1={10,20,30}
>>> s2={20,30,40,50}
----------------------------------------------
>>> s3=s1.union(s2).difference(s1.intersection(s2))
>>> print(s3,type(s3))--------------------{40, 50, 10} <class 'set'>
                        OR
>>> s4=(s1.difference(s2)).union(s2.difference(s1))
>>> print(s4,type(s4))---------------------{40, 10, 50} <class 'set'>
------------------------------------------------------------------------------------------------------------------------------------------------------------
14. difference_update()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  setobj3=setobj1.difference_update(setobj2)
-----------
=>This function is used for Removing the Common Elements from Both Setobj1 and SetObj2 and Takes Remaining Elements from SetObj1 and Place them in setobj1 Itself and the Value of setObj3 contains  None.
---------------------
Examples
---------------------
>>> s1={10,20,30}
>>> s2={20,30,40,50}
>>> s3=s1.difference_update(s2)
>>> print(s3,type(s3))--------------------None <class 'NoneType'>
>>> print(s1,type(s1))--------------------{10} <class 'set'>
>>> s1={10,20,30}
>>> s2={20,30,40,50}
>>> s2.difference_update(s1)
>>> print(s2)--------------------------------{50, 40}
------------------------------------------------------------------------------------------------------------------------------------------------------------
15. symmetric_difference_update()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:setobj1.symmetric_difference_update(setobj2)


=>This Function Removes the Common Elements from Both SetObj1 and SetObj2 and Take the Remaining Elements 
    from Both SetObj1 and Setobj2 and Place them in SetObj1 Itself.
-----------------------
Examples
------------------------
>>> s1={10,20,30}
>>> s2={20,30,40,50}
>>> s3=s1.symmetric_difference_update(s2)
>>> print(s3)--------------None
>>> print(s1,type(s1))---------{40, 10, 50} <class 'set'>
------------------------------------------------------------------------------------------------------------------------------------------------------------
16. update()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj1.update(setobj2)
=>This Function updates all Elements of SetObj2 with SetObj1
                                OR
=>This Function Merger all Elements of SetObj2 with SetObj1
-----------------------
Examples
-----------------------
>>> s1={10,20,30}
>>> s2={15,25}
>>> print(s1,id(s1))-----------------{10, 20, 30} 1794171953760
>>> print(s2,id(s2))-----------------{25, 15} 1794175144160
>>> s1.update(s2)
>>> print(s1,id(s1))------------------{20, 25, 10, 30, 15} 1794171953760
-------------------------------------
>>> s1={10,20,30}
>>> s2={10,15}
>>> s1.update(s2)
>>> print(s1)--------------------{20, 10, 30, 15}
-----------------------------------
>>> s1={10,20,30}
>>> s2={10,20,30}
>>> s1.update(s2)
>>> print(s1)--------------------{20, 10, 30}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
17. intersection_update()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:setobj1.intersection_update(setobj2)


=>This FunctionO the Common Elements from Both SetObj1 and SetObj2 and Resultant Common  Elements 
    Placedin SetObj1 Itself.
-----------------------------------
Examples
------------------------------------
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s1.intersection_update(s2)
>>> print(s1)------------------{20}
=====================================================================================