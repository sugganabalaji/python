			Working with Missing Data
		============================================
=>Missing Data can occur when no information is provided for one or more items or for a whole unit. Missing Data is a very big problem in real life scenario. Missing Data can also refer to as NA(Not Available) values in pandas.
--------------------------------------------------------------
Checking for missing values using isna(),isnull() ,notna() and notnull() :
-------------------------------------------------------------------------------------------------------------------------------------------
=>In order to check missing values in Pandas DataFrame, we use a function isna(),isnull() , notnull()  and notna()
=>These function help in checking whether a value is NaN or not. These function can also be used in    Pandas Series in order to find null values in a series.

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, 45, 56, np.nan],
        'Third Score':[np.nan, 40, 80, 98]}
 
# creating a dataframe from list
df = pd.DataFrame(dict)
 
# using isnull() function  
df.isnull()
OUTPUT
	First Score	Second Score	Third Score
0	False		False		True
1	False		False		False
2	True			False		False
3	False		True			False
====================================================================================
	Filling missing values using fillna(), replace()  :
====================================================================================
=>In order to fill null values in a datasets, we use fillna(), replace() function these function replaces NaN values with some value of their own. All these function help in filling a null values in datasets of a DataFrame. 

Syntax:  DataFrameObj.fillna(value,axis)
-----------------------------------------------------------------------------------------------------------------------------------------------------
		by using fillna() and replace()
		---------------------------------
# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, 45, 56, np.nan],
        'Third Score':[np.nan, 40, 80, 98]}
 
# creating a dataframe from dictionary
df = pd.DataFrame(dict)
 
# filling missing value using fillna()  
df.fillna(0)  # OR df.replace(to_replace = np.nan, value = 0)  
OUTPUT
-------
	First Score	Second Score	Third Score
0	100.0		30.0		0.0
1	90.0			45.0		40.0
2	0.0			56.0		80.0
3	95.0			0.0		98.0
--------------------------------------------------------------------------------------------------------------------------------------------------------
# Create DataFrame
import pandas as pd
import numpy as np
df = pd.DataFrame(({
     'Courses':["Spark",'Java',"Scala",'Python'],
     'Fee' :[20000,np.nan,26000,24000],
     'Duration':['30days','40days', pd.NA,'40days'],
     'Discount':[1000,np.nan,2500,None]
               }))
print("Create DataFrame:\n", df)
----------------------------------------------------------------
Create DataFrame:
   Courses      Fee Duration  Discount
0   Spark  20000.0   30days    1000.0
1    Java      NaN   40days       NaN
2   Scala  26000.0     <NA>    2500.0
3  Python  24000.0   40days       NaN
-----------------------------------------------------------------
# Fillna to replace all NaN
df2 = df.fillna('None')
print("After replacing all NAN/NA values with None:\n", df2)
---------------
After replacing all NAN/NA values with None:
   Courses      Fee Duration Discount
0   Spark  20000.0   30days   1000.0
1    Java     None   40days     None
2   Scala  26000.0     None   2500.0
3  Python  24000.0   40days     None
-----------------------------------------------------------
# Fillna on one column
df2['Discount'] =  df['Discount'].fillna('0')
print(df2)
-------------------------------
 Courses      Fee Duration Discount
0   Spark  20000.0   30days   1000.0
1    Java     None   40days        0
2   Scala  26000.0     None   2500.0
3  Python  24000.0   40days        0
-----------------------------------------------------------------------
# Fillna() on multiple columns
df2[['Discount','Fee']] =  df[['Discount','Fee']].fillna('0')
print(df2)
-----------------
 Courses      Fee Duration Discount
0   Spark  20000.0   30days   1000.0
1    Java        0   40days        0
2   Scala  26000.0     None   2500.0
3  Python  24000.0   40days        0
---------------------------------------------------------
# Fillna() on multiple columns with Different Values
df2 =  df.fillna(value={'Discount':'0','Fee':10000} )
print(df2)
-----------------------------
  Courses      Fee Duration Discount
0   Spark  20000.0   30days   1000.0
1    Java  10000.0   40days        0
2   Scala  26000.0     <NA>   2500.0
3  Python  24000.0   40days        0
-----------------------------------------------------------------------

===========================================================
	Dropping missing values using dropna() :
============================================================
	DataFrame.dropna( axis=0, how='any')

axis---->Determine if rows or columns which contain missing values are removed.
			0, or ‘index’ : Drop rows which contain missing values.
			1, or ‘columns’ : Drop columns which contain missing value.
			Default Value: 0
how----->	Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.
		‘any’ : If any NA values are present, drop that row or column.
		‘all’ : If all values are NA, drop that row or column.
------------------------------------------------------------------------------------------------------------------------------------------
In order to drop a null values from a dataframe, we used dropna() function this fuction drop Rows/Columns of datasets with Null values in different ways.

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, np.nan, 45, 56],
        'Third Score':[52, 40, 80, 98],
        'Fourth Score':[np.nan, np.nan, np.nan, 65]}
 
# creating a dataframe from dictionary
df = pd.DataFrame(dict)
print(df)
df.dropna()
OUTPUT
---------
   First Score  Second Score  Third Score  Fourth Score
0        100.0          30.0           52           NaN
1         90.0           NaN           40           NaN
2          NaN          45.0           80           NaN
3         95.0          56.0           98          65.0

Now we drop rows with at least one Nan value (Null value)

	First Score	Second Score	Third Score	Fourth Score
3		95.0			56.0			98		65.0
========================================================================
