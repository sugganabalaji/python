	==================================================
				DataFrame--GroupBy
	==================================================
=>The Group By mechanism in the Pandas provides a way to break a DataFrame into different groups or chunks based on the values of single or multiple columns.
=>Let's understand with some examples.
=>Assume we have a DataFrame,
----------------------------------------------------------------------------------------------------
 ID     Name	Age    City         Experience
----------------------------------------------------------------------------------------------------
11     Jack      44     Sydney          19
12     Riti      41     Delhi           17
13     Aadi      46     Mumbai          11
14     Mohit     45     Delhi           15
15     Veena     43     Delhi           14
16     Shaunak   42     Mumbai          17
17     Manik     42     Sydney          14
18     Vikas     42     Delhi           11
19     Samir     42     Mumbai          15
20     Shobhit   40     Sydney          12
----------------------------------------------------------------------------------------------------
=>This DataFrame has a column 'City' which has three unique values like, "Delhi", "Mumbai" and "Sydney". We want to create different groups out of this DataFrame based on the column "City" values.
=>As this column has only three unique values, so there will be three different groups.
=>Group 1 will contain all the rows for which column "City" has the value "Delhi" i.e.
----------------------------------------------------------------------------------------------------
ID	Name     Age     City      Experience
----------------------------------------------------------------------------------------------------
12   Riti    41     Delhi          17
14   Mohit   45     Delhi          15
15   Veena   43     Delhi          14
18   Vikas   42     Delhi          11
----------------------------------------------------------------------------------------------------
Group 2 will contain all the rows for which column "City" has the value "Mumbai" i.e.
----------------------------------------------------------------------------------------------------
ID     Name       Age        City	        Experience
----------------------------------------------------------------------------------------------------
13    Aadi        46         Mumbai           11
16    Shaunak     42         Mumbai           17
19    Samir       42         Mumbai           15
----------------------------------------------------------------------------------------------------

Group 3 will contain all the rows for which column "City" has the value "Sydney" i.e.

ID     Name     Age    City        Experience
11     Jack     44     Sydney          19
17     Manik    42     Sydney          14
20     Shobhit  40     Sydney          12

--------------------------------------------------------------------------------------------------------
DataFrame.groupby() method
--------------------------------------------------------------------------------------------------------
DataFrame's groupby() method accepts column names as arguments. Based on the column values, it creates several groups and returns a DataFrameGroupBy object that contains information about these groups.

For example, let's create groups based on the column "City",

# Create Groups based on values in column 'city'
groupObj = df.groupby('City')
print(groupObj)
-------------
Output
-------------
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002895CA14048>

The groupby() function created three groups because column "City" has three unique values. It returned a DataFrameGroupBy object with information regarding all three groups.
--------------------------------------------------------------------------------------------------------
Iterate over all the DataFrame Groups
-------------------------------------------------------------------------------------------------------
-DataFrame's groupby() function returns a DataFrameGroupBy object, which contains the information of all the groups. The DataFrameGroupBy is an iterable object. It means using a for loop, we can iterate over all the created Groups,

# Iterate over all the groups
for grpName, rows in df.groupby('City'):
	
    print("Group Name: ", grpName)
    print('Group Content: ')
    print(rows)
------------------------------
Output:
-------------------------------------------------
Group Name:  Delhi
Group Content: 
     Name    Age   City      Experience
ID
12   Riti    41    Delhi          17
14   Mohit   45    Delhi          15
15   Veena   43    Delhi          14
18   Vikas   42    Delhi          11
Group Name:  Mumbai
Group Content: 
       Name    Age    City      Experience
ID
13     Aadi    46    Mumbai        11
16    Shaunak  42    Mumbai        17
19    Samir    42    Mumbai        15
Group Name:  Sydney
Group Content: 
       Name  Age    City  Experience
ID
11     Jack   44  Sydney          19
17    Manik   42  Sydney          14
20  Shobhit   40  Sydney          12

--------------------------------------------------------------------------------------------------------
Get first row of each Group
--------------------------------------------------------------------------------------------------------
=>DataFrame's groupby() function returns a DataFrameGroupBy object, which contains the information of all the groups. The DataFrameGroupBy object also provides a function first(), and it returns a DataFrame containing the first row of each of the Group.
--------------------------------------------------------------------------------------------------------
Get last row of each Group
--------------------------------------------------------------------------------------------------------
=>DataFrame's groupby() function returns a DataFrameGroupBy object, which contains the information of all the groups. The DataFrameGroupBy object also provides a function last(), and it returns a DataFrame containing the last row of each of the Group.
--------------------------------------------------------------------------------------------------------
Get nth  row of each Group
--------------------------------------------------------------------------------------------------------
=>The DataFrameGroupBy object also provides a function nth() is used to get the value corresponding the nth row for each group. To get the first value in a group, pass 0 as an argument to the nth() function.
-----------------------------
For example
-----------------------------
# Get first row of each group
firstRowDf = df.groupby('City').first()
print(firstRowDf)
---------------------------------
Output:
---------------------------------
        Name  Age  Experience
City
Delhi   Riti   41      17
Mumbai  Aadi   46      11
Sydney  Jack   44      19
There were three unique values in the column 'City', therefore 3 groups were created. The first() function fetched the first row of each of the Group and returned a DataFrame populated with that. The returned DataFrame has a row for each of the city and it is the first row from each of the city groups.
--------------------------------------------------------------------------------------------------------
Get the count of number of DataFrame Groups
--------------------------------------------------------------------------------------------------------
The DataFrameGroupBy object also provides a function size(), and it returns the count of rows in each of the groups created by the groupby() function. For example,

# Get the size of DataFrame groups
print(df.groupby('City').size())
----------------
Output:
----------------
Delhi      4
Mumbai     3
Sydney     3
dtype: int64
As there were three unique values in the column 'City', therefore 3 groups were created by groupby() function. The size() function returned a Series containing the count of number of rows for each of the group.
============================================================================
DataFrame GroupBy and agg() method
=============================================================================
DataFrame's groupby() function returns a DataFrameGroupBy object, which contains the information of all the groups. The DataFrameGroupBy object also provides a function agg(), and it returns aggregated values

Let's get the mean for all values in column "Age" and the sum of all values in column "Experience" for each of the Group created by the groupby('City') method,

# Get the mean Age column values in each group and 
# Sum of Experience column values in each group
values = df.groupby('City').agg( {'Age': 'mean', 'Experience': 'sum'})
print(values)
-----------------------------------------------------------------------------------------------------------
# Get the size, sum and mean of values
# of each numeric column in each group
values = df.groupby('City')["Age"].agg(['size', 'sum', 'mean'])
print(values)
===========================================================================